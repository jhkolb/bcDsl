contract Auction {
    data {
      Seller: Identity
      HighestBidder: Identity
      HighestBid: Uint
      AuctionStart: Timestamp
      Duration: Timespan
    }

    initialize: ->(duration: Timespan) open {
        Seller = sender
        HighestBid = 0
        AuctionStart = now
        Duration = duration
    }

    initialBid: open ->(tokens: Uint) open
    requires [ HighestBid == 0 && tokens > 0 ] {
        HighestBid = tokens
        HighestBidder = sender
    }

    submitBid: open ->(tokens: Uint) open
    requires [ tokens > HighestBid && HighestBid > 0 ] {
        send HighestBid to HighestBidder
        HighestBidder = sender
        HighestBid = tokens
    }

    closeAuction: open -> closed requires [ now - AuctionStart >= Duration ]

    redeem: closed -> closed
    authorized [ Seller ] {
        sendAndConsume HighestBid to Seller
    }
}

properties {
    [](balance >= 0)
    [](<>(closed))
    [](max(submitBid.tokens) > 0)
    [](closed => HighestBid >= max(submitBid.tokens))
}
